'use strict';

const pkg = require('../package.json');

module.exports = {
  meta: {
    name: '@amoo-milad/eslint-plugin',
    version: pkg.version,
  },
  rules: {
    'file-name': require('./rules/file-name'),
    'test-dir': require('./rules/test-dir'),
    'export-name': require('./rules/export-name'),
    interface: require('./rules/interface'),
  },
  rulesConfig: {
    'file-name': 0,
    'test-dir': 0,
    'export-name': 0,
    interface: 0,
  },
  configs: {
    recommended: {
      plugins: [
        '@typescript-eslint/eslint-plugin',
        '@amoo-milad/eslint-plugin',
      ],
      extends: [
        'plugin:@typescript-eslint/recommended',
        'plugin:prettier/recommended',
        'plugin:security/recommended',
      ],
      rules: {
        '@amoo-milad/file-name': 'error',
        '@amoo-milad/export-name': 'error',
        '@amoo-milad/interface': 'error',
        '@amoo-milad/test-dir': 'error',
        'lines-between-class-members': [
          'error',
          'always',
          { exceptAfterSingleLine: true },
        ],
        '@typescript-eslint/ban-ts-comment': 'error',
        '@typescript-eslint/ban-tslint-comment': 'error',
        '@typescript-eslint/ban-types': 'error',
        '@typescript-eslint/consistent-generic-constructors': 'error',
        '@typescript-eslint/consistent-indexed-object-style': 'error',
        '@typescript-eslint/consistent-type-assertions': 'error',
        '@typescript-eslint/consistent-type-exports': 'error',
        '@typescript-eslint/consistent-type-imports': [
          'error',
          {
            prefer: 'type-imports',
            disallowTypeAnnotations: true,
            fixStyle: 'separate-type-imports',
          },
        ],
        '@typescript-eslint/explicit-function-return-type': 'error',
        '@typescript-eslint/explicit-member-accessibility': 'error',
        '@typescript-eslint/explicit-module-boundary-types': 'error',
        '@typescript-eslint/member-ordering': [
          'error',
          {
            default: [
              'public-static-field',
              'public-static-readonly-field',
              'protected-static-field',
              'protected-static-readonly-field',
              'private-static-field',
              'private-static-readonly-field',
              '#private-static-field',
              '#private-static-readonly-field',

              'public-static-get',
              'protected-static-get',
              'private-static-get',
              '#private-static-get',

              'public-static-set',
              'protected-static-set',
              'private-static-set',
              '#private-static-set',

              'public-static-method',
              'protected-static-method',
              'private-static-method',
              '#private-static-method',

              'public-readonly-field',
              'public-field',
              'protected-readonly-field',
              'protected-field',
              'private-readonly-field',
              'private-field',
              '#private-readonly-field',
              '#private-field',

              'public-get',
              'protected-get',
              'private-get',
              '#private-get',

              'public-set',
              'protected-set',
              'private-set',
              '#private-set',

              'public-constructor',
              'protected-constructor',
              'private-constructor',

              'public-method',
              'protected-method',
              'private-method',
              '#private-method',

              'signature',
              'readonly-signature',
              'call-signature',
            ],
          },
        ],
        '@typescript-eslint/method-signature-style': ['error', 'method'],
        '@typescript-eslint/naming-convention': [
          'error',
          {
            selector: 'function',
            format: ['PascalCase'],
            modifiers: ['exported'],
            leadingUnderscore: 'allow',
            trailingUnderscore: 'allow',
          },
          {
            selector: 'objectLiteralProperty',
            format: null,
          },
          {
            selector: 'classProperty',
            format: null,
            modifiers: ['protected'],
            filter: {
              regex: '^@instanceof$',
              match: true,
            },
          },
          {
            selector: 'enum',
            format: ['PascalCase'],
          },
          {
            selector: 'enumMember',
            format: ['PascalCase'],
          },
          {
            selector: 'variable',
            format: ['UPPER_CASE', 'camelCase', 'PascalCase'],
            modifiers: ['exported'],
            leadingUnderscore: 'allow',
            trailingUnderscore: 'allow',
          },
          {
            selector: 'method',
            format: ['PascalCase', 'camelCase'],
            modifiers: ['static'],
            leadingUnderscore: 'allow',
            trailingUnderscore: 'allow',
          },
          {
            selector: 'property',
            format: ['UPPER_CASE', 'camelCase', 'PascalCase'],
            modifiers: ['static'],
            leadingUnderscore: 'allow',
            trailingUnderscore: 'allow',
          },
          {
            selector: 'variable',
            format: ['camelCase'],
            leadingUnderscore: 'allow',
            trailingUnderscore: 'allow',
          },
          {
            selector: 'typeLike',
            format: ['PascalCase'],
          },
          {
            selector: 'default',
            format: ['camelCase', 'snake_case'],
            leadingUnderscore: 'allow',
            trailingUnderscore: 'allow',
          },
        ],
        '@typescript-eslint/no-base-to-string': 'error',
        '@typescript-eslint/no-confusing-non-null-assertion': 'error',
        '@typescript-eslint/no-confusing-void-expression': 'error',
        '@typescript-eslint/no-duplicate-enum-values': 'error',
        '@typescript-eslint/no-duplicate-type-constituents': 'error',
        '@typescript-eslint/no-dynamic-delete': 'error',
        '@typescript-eslint/no-explicit-any': 'error',
        '@typescript-eslint/no-extra-non-null-assertion': 'error',
        '@typescript-eslint/no-floating-promises': 'error',
        '@typescript-eslint/no-for-in-array': 'error',
        '@typescript-eslint/no-import-type-side-effects': 'error',
        '@typescript-eslint/no-inferrable-types': 'error',
        '@typescript-eslint/no-invalid-void-type': 'error',
        '@typescript-eslint/no-meaningless-void-operator': 'error',
        '@typescript-eslint/no-misused-new': 'error',
        '@typescript-eslint/no-misused-promises': 'error',
        '@typescript-eslint/no-mixed-enums': 'error',
        '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
        '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
        '@typescript-eslint/no-redundant-type-constituents': 'error',
        '@typescript-eslint/no-require-imports': 'error',
        '@typescript-eslint/no-this-alias': 'error',
        '@typescript-eslint/no-unnecessary-type-arguments': 'error',
        '@typescript-eslint/no-unnecessary-type-assertion': 'error',
        '@typescript-eslint/no-unnecessary-type-constraint': 'error',
        '@typescript-eslint/no-unsafe-argument': 'error',
        '@typescript-eslint/no-unsafe-assignment': 'error',
        '@typescript-eslint/no-unsafe-call': 'error',
        '@typescript-eslint/no-unsafe-enum-comparison': 'error',
        '@typescript-eslint/no-unsafe-return': 'error',
        '@typescript-eslint/no-useless-empty-export': 'error',
        '@typescript-eslint/no-var-requires': 'error',
        '@typescript-eslint/non-nullable-type-assertion-style': 'error',
        '@typescript-eslint/parameter-properties': [
          'error',
          {
            allow: [
              'public readonly',
              'protected readonly',
              'private readonly',
              'protected',
              'private',
            ],
          },
        ],
        '@typescript-eslint/prefer-as-const': 'error',
        '@typescript-eslint/prefer-enum-initializers': 'error',
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/prefer-function-type': 'error',
        '@typescript-eslint/prefer-includes': 'error',
        '@typescript-eslint/prefer-literal-enum-member': 'error',
        '@typescript-eslint/prefer-optional-chain': 'error',
        '@typescript-eslint/prefer-readonly': 'error',
        '@typescript-eslint/prefer-reduce-type-parameter': 'error',
        '@typescript-eslint/prefer-return-this-type': 'error',
        '@typescript-eslint/prefer-string-starts-ends-with': 'error',
        '@typescript-eslint/prefer-ts-expect-error': 'error',
        '@typescript-eslint/promise-function-async': 'error',
        '@typescript-eslint/require-array-sort-compare': 'error',
        '@typescript-eslint/restrict-plus-operands': 'error',
        '@typescript-eslint/restrict-template-expressions': 'error',
        '@typescript-eslint/sort-type-constituents': 'error',
        '@typescript-eslint/switch-exhaustiveness-check': 'error',
        '@typescript-eslint/unified-signatures': 'error',
        '@typescript-eslint/default-param-last': 'error',
        '@typescript-eslint/no-useless-constructor': 'error',
        '@typescript-eslint/no-use-before-define': 'error',
        '@typescript-eslint/no-unused-expressions': 'error',
        '@typescript-eslint/no-throw-literal': 'error',
        '@typescript-eslint/no-shadow': 'error',
        '@typescript-eslint/no-loop-func': 'error',
        '@typescript-eslint/no-invalid-this': 'error',
      },
    },
  },
};
